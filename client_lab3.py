# -*- coding: utf-8 -*-
"""cliente-lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ku_VCWumOZTkFl9IvaUxJ5LtJiqiy0vz

CONFIG
"""

CONFIG_PARAMS = {
    'SERVER_IP_ADDRESS': '127.0.0.1',
    'SERVER_PORT': 8081,
    'SERVER_MAX_CLIENTS': 1,
    'SERVER_MAX_WORKERS': 2,
    'EXIT_MESSAGE': 'exit'
}

"""CLIENT"""

import socket#Para comunicarse por la red
import pickle#Para serializacion de datos
import struct#Para manejar datos binarios estructurados

# Configuration Parameters
SERVER_IP_ADDRESS = CONFIG_PARAMS['SERVER_IP_ADDRESS']
SERVER_PORT = CONFIG_PARAMS['SERVER_PORT']
EXIT_MESSAGE = CONFIG_PARAMS['EXIT_MESSAGE']

def save_vector_to_file(vector, file_path="/Users/alejandro/Desktop/sorted_vector.txt"):
    try:
        with open(file_path, 'w') as file:
            for num in vector:
                file.write(f"{num}\n")
        print(f" Vector guardado en {file_path}")
    except Exception as ex:
        print(f"Error al guardar el archivo: {ex}")

def load_vector_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            vector = [int(line.strip()) for line in file]
        return vector
    except Exception as ex:
        print(f"Error al leer el archivo: {ex}")
        return None

def display_menu():
    #Menu para elegir el algoritmo ordenamiento
    print("Seleccione el algoritmo:")
    print("1. MergeSort")
    print("2. HeapSort")
    print("3. QuickSort")
    #Necesita ser una de las opciones 1-3
    opc = int(input("Digite su respuesta: "))
    while opc<1 or opc>3:
      opc = int(input("Digite una respuesta valida: "))
    return opc

def recv_exact(socket, n):
    #Recibir exactamente n bytes desde socket, debido a que habia problemas si no recibia todos los bytes a la vez
    data = b''
    while len(data) < n:
        chunk = socket.recv(n - len(data))
        if not chunk:
            raise Exception("Conexión cerrada antes de recibir todos los datos.")
        data += chunk
    return data

def start_client(vector,algoritmo,limite):
  try:
    print(" Intentando conectar con el servidor...")
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((SERVER_IP_ADDRESS, SERVER_PORT))
    print(" Conexion establecida con el servidor.")

    # Preparar los datos que se enviarán al servidor
    task_data = {"vector": vector, "limite": limite,"algoritmo":algoritmo}
    
    ser_data=pickle.dumps(task_data)
    data_length=len(ser_data)

    # Enviar los datos al servidor
    print(" Enviando datos al servidor...")
    client_socket.sendall(struct.pack('!I', data_length)) 

    client_socket.sendall(ser_data)

    # Esperar la respuesta del servidor
    print(" Esperando respuesta del servidor...")

    response_length = recv_exact(client_socket, 4)
    response_length=struct.unpack('!I', response_length)[0]

    #response = client_socket.recv(4194304)

    response=recv_exact(client_socket,response_length)
    response_data=pickle.loads(response)
    
    #Mostrar resultados al cliente
    final_vector=response_data["sorted_vector"].copy()
    final_vector.extend(response_data["unsorted_vector"])#Se agrega la parte desordenada al final del vector ordenado

    #print("Resultado recibido del servidor:", final_vector)

    print("Resultado recibido del servidor, vector completamente ordenado")
    print("Duracion de tiempo del ultimo worker:", response_data["time_taken"])
    print("Duracion de tiempo total:",response_data["total_time"])

      

    #Guardar vectores en archivos txt
    save_vector_to_file(final_vector, "/Users/alejandro/Desktop/final_vector.txt")
    #save_vector_to_file(response_data["sorted_vector"], "/Users/alejandro/Desktop/sorted_vector.txt")
    #save_vector_to_file(response_data["unsorted_vector"], "/Users/alejandro/Desktop/unsorted_vector.txt")

    #TEST
    #print(len(vector)==len(final_vector))
    #print(len(vector),",",len(final_vector))
    #if final_vector == sorted(vector):
     #print("Vector completamente ordenado")
    #else:
      #print("El vector no esta completamente ordenado")
    

    # Cerrar el socket
    print(" Cerrando conexión con el servidor.")
    client_socket.close()
  except Exception as ex:
    print(f"Error al conectarse con el servidor:{ex}")

if __name__ == "__main__":
    print("Bienvenido al cliente")
    #Ubicacion del txt con el vector
    file_path="/Users/alejandro/Desktop/TEST_VECTOR.txt"
    #Leer txt
    vector = load_vector_from_file(file_path)

    if vector is None:
      print("Error encontrando el archivo txt del vector")
    else:
      print("Vector obtenido")
      opc=display_menu()

      try:
        limite=int(input("Ingrese el limite de tiempo (segundos)"))
        if limite<=0:
          raise ValueError("El limite de tiempo tiene que ser mayor que 0")
      except Exception as ex:
        print(f"Su limite de tiempo no es valido:{ex}")

      #Iniciar
      start_client(vector,opc,limite)